program: asset_pricing_sequential.py
name: asset_pricing_sequential_g_positive_ensemble
description: Ensemble run with asset pricing sequential with g = 0.02, c = 0 (100 seeds)
method: grid
parameters:
  trainer.logger.tags:
    value: [asset_pricing_sequential_g_positive_ensemble]
  seed:
    min: 1
    max: 100 # number of ensembles to solve
  trainer.logger.offline:
    value: false # log online for W&B optimization
  trainer.max_time:
    value: 00:00:03:00  # these tests shouldn't take more than 2-3 minutes
   # Stopping criteria
  trainer.callbacks.monitor:
    value: train_loss
  trainer.callbacks.stopping_threshold:
    value: 1.0e-7

  # Economic model parameters 
  model.g:
    value: 0.02
  model.c:
    value: 0.0
# Using the neural net with the exponential layer
  model.ml_model.class_path:
    value:  econ_layers.layers.FlexibleSequential
  model.ml_model.init_args.n_in:
    value: 1
  model.ml_model.init_args.n_out:
    value: 1
  model.ml_model.init_args.layers:
    value: 4
  model.ml_model.init_args.hidden_dim: 
    value: 128
  model.ml_model.init_args.hidden_bias: 
    value: true
  model.ml_model.init_args.last_bias: 
    value: true
  model.ml_model.init_args.activator.class_path:
    value: torch.nn.Tanh
  model.ml_model.init_args.last_activator.class_path:
    value: torch.nn.Softplus
  model.ml_model.init_args.OutputRescalingLayer.class_path:
    value: econ_layers.layers.ScalarExponentialRescaling
  